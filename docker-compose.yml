# Configuration common to Airflow services
x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 8sl5Z7QWQAoWXqsXbB4rWogfz4xJ0y82bPunpG98E38=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__WEBSERVER__BASE_URL: http://localhost:8081
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "50000:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - airflow-network

services:
  # PostgreSQL Service
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow-network

  # Airflow Initialization Service
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init &&
        airflow db upgrade &&
        airflow users create \
            --username admin \
            --firstname admin \
            --lastname admin \
            --email admin@admin.org \
            --role Admin \
            --password admin
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    networks:
      - airflow-network

  # Airflow Webserver Service
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler Service
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Spark Master Service
  spark-master:
    build:
      context: .
      dockerfile: docker/Dockerfile.spark
    environment:
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark-apps:/opt/spark/work-dir
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow-network
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]

  # Spark Worker Service
  spark-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.spark
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
    volumes:
      - ./spark-apps:/opt/spark/work-dir
    depends_on:
      spark-master:
        condition: service_healthy
    restart: always
    networks:
      - airflow-network
    command: ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]

  # Jupyter Notebook Service
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    environment:
      JUPYTER_ENABLE_LAB: yes
      SPARK_OPTS: "--master spark://spark-master:7077 --driver-memory 1g --executor-memory 1g --conf spark.driver.host=jupyter"
      PYSPARK_PYTHON: /usr/bin/python3
      PYSPARK_DRIVER_PYTHON: /usr/bin/python3
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
    depends_on:
      - spark-master
      - spark-worker
    restart: always
    networks:
      - airflow-network

# Volumes
volumes:
  postgres-db-volume:

# Networks
networks:
  airflow-network:
    driver: bridge
